package com.oono.java4;
/*
 * OOP特征之三：多态性 polymorphism
 * 
 * 1. 理解多态性：可以理解为一个事物的多种形态
 * 2. 何为多态性：
 * 		对象的多态性：父类的引用指向子类的对象 i.e new一个类的子类（而不是new它自己这个类）
 * 
 * 3. 多态的使用：虚拟方法调用
 * 		有了对象的多态性以后，我们再编译期，只能调用父类中声明过的方法（如果父类没有，不会调子类的方法）
 * 		但在运行期，实际执行的是子类重写父类的方法
 * 		总结：编译看左边，运行看右边
 * 
 * 4. 多态性的使用前提：① 类的继承关系（要有子类）	② 方法的重写（子类要重写过父类的方法，否则多态没有意义）
 * 
 * 5. 对象的多态性，只适用于方法，不适用于属性（助记：
 * 		所以当Person p1 = new Man();
 * 				p1去调id时候，调出来的是Person类的id。
 * 		
 * 		助记：多态 -> 重写的方法，编译看左边运行看右边。同名的属性，编译和运行都看左边
 * 
 */
public class PersonTest {
	public static void main(String[] args) {
		
		Person p1 = new Person();
		p1.eat();
		
		Man man = new Man();
		man.eat();
		man.age = 25;
		man.earnMoney();
		
		//*******************************************************
		System.out.println("****************************************");
		//（对象的）多态性：父类的引用指向子类的
		Person p2 = new Man();
//		Person p3 = new Woman();
		
		//多态的使用：当调用子父类同名同参数的方法时，实际执行的是子类重写父类的方法
//				---这个叫虚拟方法调用
		p2.eat();
		p2.walk();
		
		
//		p2.earnMoney(); 这居然不能调？！
		
		System.out.println(p2.id);//1001 即为父类中定义的属性，而不是子类中的属性
		
	}
}
